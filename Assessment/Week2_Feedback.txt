Starting weekly assessment for Katerina, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.59 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Assessment, Week2, .git

Found the following files in parent directory: README.txt

Checking for key files in parent directory...

.gitignore missing, 1 pt deducted

Current Points = 99

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My QMEE CourseWork Repository

Week1: Code, Data, Sandbox

Code: 

First Shell script: boilerplate.sh

From tab separated files to comma separated files(csv): tabtocsv.sh

Assign values to variables: variables.sh, MyExampleScript.sh

Countlines in a file: CountLines.sh

Concatenate the contents of two files: ConcatenateTwoFiles.sh

Convert tiff to png: tiff2png.sh

First LaTeX Example: FirstExample.tex, FirstExample.pdf

First LaTeX Biblio: FirstBiblio.bib

Compile Latex: CompileLaTeX.sh

From csv to space separated values (ssv): csvtospace.sh

Data: 

Files used for shell script chapter practicals: 1800.csv, 1800.csv.ssv...

Files used for unix chapter practicals(fasta files): 407229326.fasta, 407228412.fasta, E.coli.fasta

Grep exercises : spawannxs.txt

Sandbox:

Files used to search-find files exercises: TestFind, TestWild

Redirection and pipes exercises: ListRootDir.txt


**********************************************************************

======================================================================
Looking for the weekly directories...

Found 2 weekly directories: Week1, Week2

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: Code, Sandbox, data, Results

Found the following files: 

Checking for readme file in weekly directory...

README file missing, 1 pt deducted

Current Points = 98

Found following files in results directory: ...
Found 10 code files: boilerplate.py, cfexercises2.py, oak.py, scope.py, basic_io.py, loops.py, using_name.py, sysargv.py, cfexercise1.py, control_flow.py

Found the following extra files: 
0.5 pt deducted per extra file

Current Points = 98.0

======================================================================
Testing script/code files...

======================================================================
Inspecting script file boilerplate.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application.
You can use several lines"""

_appname_ = '[applicattion name here]'
_author_ = 'Your Name (your@email.address)'
_version_ = '0.0.1'
_license_ = "License for this code/program"

## imports ##
import sys # module to interface our program with operating systems

## constants ##

## functions ##
def main(argv):
    """Main entry point of the program"""
    print('This is a boilerplate')
    return 0

    if _name_ == "_main_":
        """Makes sure the "main" function is called from command line"""
        status = main(sys.argv)
        sys.exit(status)
**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.01409s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:
**********************************************************************
def foo1(x):
    return x ** 0.5 

def foo2(x, y):
    if x > y:
        return x
    return y
def foo3(x, y, z):
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

def foo4(x):
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo5(x): # a recursive function
    if x == 1:
        return 1
    return x * foo5(x - 1)

foo5(10)
    
**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 97.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.01245s

======================================================================
Inspecting script file oak.py...

File contents are:
**********************************************************************
## Finds just those tax that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris' ,
         'Quercus petraea' ,
         ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)**********************************************************************

Testing oak.py...

oak.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 96.0

Output (only first 500 characters): 

**********************************************************************
set(['Quercus robur', 'Quercus cerris', 'Quercus petraea'])
set(['Quercus robur', 'Quercus cerris', 'Quercus petraea'])
set(['QUERCUS ROBUR', 'QUERCUS CERRIS', 'QUERCUS PETRAEA'])
set(['QUERCUS ROBUR', 'QUERCUS CERRIS', 'QUERCUS PETRAEA'])

**********************************************************************

Code ran without errors

Time consumed = 0.01527s

======================================================================
Inspecting script file scope.py...

File contents are:
**********************************************************************
##Try this first
_a_global = 10

def a_function():
    _a_global = 5
    _a_global = 4
    print("Inside the function, the value is ", _a_global)
    print("Inside the function, the value is ",_a_global)
    return None

a_function()
print("Outside the function, the value is ",_a_global)

##Now try this

_a_global = 10

def a_function():
    global _a_global
    _a_global = 5
    _a_global = 4
    print("Inside the function, the value is ",_a_global)
    print("Inside the function, the value is ",_a_global)
    return None

    a_function()
    print("Outside the function, the value is",_a_global)
**********************************************************************

Testing scope.py...

scope.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 95.0

Output (only first 500 characters): 

**********************************************************************
('Inside the function, the value is ', 4)
('Inside the function, the value is ', 4)
('Outside the function, the value is ', 10)

**********************************************************************

Code ran without errors

Time consumed = 0.01524s

======================================================================
Inspecting script file basic_io.py...

File contents are:
**********************************************************************
#############################
# FILE INPUT
#############################
# Open a file for reading
f = open('../Sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../Sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()

#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../Sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()

#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../Sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../Sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)

import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
f = open('../data/testcsv.csv','r')

csvread = csv.reader(f)
temp = []
for row in csvread:
    temp.append(tuple(row))
    print(row)
    print("The species is", row[0])

f.close()

# write a file containing only species name and Body mass
f = open('../data/testcsv.csv','r')
g = open('../data/bodymass.csv','w')

csvread = csv.reader(f)
csvwrite = csv.writer(g)
for row in csvread:
    print(row)
    csvwrite.writerow([row[0], row[4]])

f.close()
g.close()**********************************************************************

Testing basic_io.py...

basic_io.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 94.0

Output (only first 500 characters): 

**********************************************************************
First Line

Second Line



Third Line



Fourth Line
First Line

Second Line

Third Line

Fourth Line
{'another key': 11, 'a key': 10}
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
('The species is', 'Species')
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
('The species is', 'Daubentonia_madagascariensis')
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
('The species is', 'Allocebus_trichotis'
**********************************************************************

Code ran without errors

Time consumed = 0.01916s

======================================================================
Inspecting script file loops.py...

File contents are:
**********************************************************************
#FOR loops in Python
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

#WHILE loops  in Python
z = 0
while z < 100:
    z = z + 1
    print(z)

b = True
while b:
    print("GERONIMO! infinite loop! ctrl+c to stop!")
# ctrl + c to stop!**********************************************************************

Testing loops.py...

loops.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 93.0

Output (only first 500 characters): 

**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 10.58942s

======================================================================
Inspecting script file using_name.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
#Filename: using_name.py

if _name_ == '_main_':
    print('This program is being run by itself')
    else:
        print('I am being imported from another module')**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 92.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
  File "using_name.py", line 6
    else:
       ^
SyntaxError: invalid syntax

======================================================================
Inspecting script file sysargv.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

import sys
print("This is te name of the script: ",sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: ", str(sys.argv))
**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 91.0

Output (only first 500 characters): 

**********************************************************************
('This is te name of the script: ', 'sysargv.py')
('Number of arguments: ', 1)
('The arguments are: ', "['sysargv.py']")

**********************************************************************

Code ran without errors

Time consumed = 0.05735s

======================================================================
Inspecting script file cfexercise1.py...

File contents are:
**********************************************************************
for i in range(3, 17):
    print('hey')

for j in range(12):
    if j % 3 == 0:
        print('hello')

for j in range(15):
    if j % 5 == 3:
        print('hi')
    elif j % 4 == 3:
        print('ha')


z = 0
while z != 15:
    print('hu')
    z = z + 3

z = 12
while z < 100:
    if z == 31:
        for k in range(7):
            print('he') 
    elif z == 18:
        print('hel')
    z = z + 1
   **********************************************************************

Testing cfexercise1.py...

cfexercise1.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 90.0

Output (only first 500 characters): 

**********************************************************************
hey
hey
hey
hey
hey
hey
hey
hey
hey
hey
hey
hey
hey
hey
hello
hello
hello
hello
hi
ha
hi
ha
hi
hu
hu
hu
hu
hu
hel
he
he
he
he
he
he
he

**********************************************************************

Code ran without errors

Time consumed = 0.01352s

======================================================================
Inspecting script file control_flow.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are consider part of the running code (normal comments are 
#stripped). Hence, you can access your docstrings at run time.
_author_ = 'Katerina (kater-inax@hotmail.com)'
_version_ = '0.0.1'

import sys 


def even_or_odd(x=0): #if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2  
    else: # When all other (if, elif) conditions are not met
        return "No divisor found for %d!" % x #Each function can return a value or variable
    return "The largest divisor of %d is %d" % (x, largest)
def is_prime(x=70): 
    """Find whether an integer is prime."""
    for i in range(2, x): # "range" returns a sequence of integers
        if x % i == 0:
            print("%d is not a prime: %d is a divisor" % (x, i)) #Print formatted text "%d %s %f %e" % (20,"30",0.0003,0.00003)

            return False
    print("%d is a prime!" % x)
    return True

def find_all_primes(x=22):
    """Find all the primes up tp x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes),x))
    return allprimes

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    print(even_or_odd(11))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)




            

**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.01454s

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 90.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!